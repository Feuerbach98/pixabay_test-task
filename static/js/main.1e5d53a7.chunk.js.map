{"version":3,"sources":["api/api.js","store/store.js","components/Image/Image.js","components/Inputs/Inputs.js","components/Search/Search.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","API_URL","getImages","query","perPage","preparedQuery","replace","trim","param","fetch","then","response","ok","Error","status","statusText","json","request","actions","change","name","value","type","search","a","store","createStore","state","action","Image","hit","useState","loaded","setLoad","id","className","classNames","alt","tags","src","webformatURL","height","onLoad","Inputs","dispatch","useDispatch","handleChange","event","target","Form","Group","Control","onChange","onKeyPress","charCode","preventDefault","placeholder","Label","as","breakpointColumns","default","1100","700","500","Search","storage","useSelector","useEffect","debouncedSearch","useCallback","debounce","images","hits","map","href","largeImageURL","rel","total","breakpointCols","columnClassName","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e5d53a7.chunk.js","sourcesContent":["const API_KEY = `19234341-bbc7811a42f823cfa8eb8945b`;\nconst API_URL = `https://pixabay.com/api/`;\n\nconst request = (param = '') => fetch(`${API_URL}?key=${API_KEY}${param}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n\nexport const getImages = (query, perPage) => {\n  const preparedQuery = query.replace(/\\s+/g, '+').trim()\n\n  return request(`&q=${preparedQuery}&per_page=${perPage}`)\n};\n","import { createStore } from 'redux';\n\nconst initialState = {\n  response: {},\n  query: '',\n  perPage: 10,\n}\n\nexport const actions = {\n  change: (name, value) => ({\n    type: 'ON_CHANGE',\n    name,\n    value,\n  }),\n  search: async(getImages, query, perPage) => ({\n    type: 'ON_SEARCH',\n    response: await getImages(query, perPage)\n  })\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ON_CHANGE': {\n      return {\n        ...state,\n        [action.name]: action.value,\n      }\n    }\n\n    case 'ON_SEARCH': {\n      return {\n        ...state,\n        response: action.response,\n      }\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const store = createStore(reducer, initialState);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './Image.css';\n\nexport const Image = ({ hit }) => {\n  const [loaded, setLoad] = useState(false);\n\n  return (\n    <img\n      id={hit.id}\n      className={classNames(\"image\", { \"preload-image\": !loaded })}\n      alt={hit.tags}\n      src={hit.webformatURL}\n      height=\"auto\"\n      onLoad={() => setLoad(true)}\n    />\n  );\n}\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../../store/store';\n\nexport const Inputs = ({ query, perPage }) => {\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    dispatch(actions.change(event.target.name, event.target.value))\n  }\n  \n  const handleSubmit = (event) => {\n    if (event.charCode === 13) {\n      event.preventDefault();\n    }\n  }\n\n  return (\n    <Form className=\"d-flex d-flex justify-content-between\">\n      <Form.Group>\n        <Form.Control\n          name=\"query\"\n          type=\"search\"\n          value={query}\n          onChange={handleChange}\n          onKeyPress={handleSubmit}\n          placeholder=\"Search\"\n        />\n      </Form.Group>\n      <Form.Group className=\"d-flex align-items-center\">\n        <Form.Label className=\"my-0 mx-2\">Count:</Form.Label>\n        <Form.Control\n          className=\"count\"\n          as=\"select\"\n          value={perPage}\n          onChange={handleChange}\n          name=\"perPage\"\n        >\n          <option value={10}>10</option>\n          <option value={20}>20</option>\n          <option value={50}>50</option>\n          <option value={100}>100</option>\n        </Form.Control>\n      </Form.Group>\n    </Form>\n  );\n}\n","import React, { useCallback, useEffect } from 'react';\nimport './Search.css';\n\nimport { getImages } from '../../api/api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from '../../store/store';\n\nimport Masonry from 'react-masonry-css';\nimport { debounce } from 'lodash';\nimport { Image } from '../Image';\nimport { Inputs } from '../Inputs';\n\nconst breakpointColumns = {\n  default: 4,\n  1100: 3,\n  700: 2,\n  500: 1\n};\n\nexport const Search = () => {\n  const storage = useSelector(store => store);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    debouncedSearch(storage.query, storage.perPage);\n  }, [storage.query, storage.perPage]);\n\n  const search = async(query, perPage) => {\n    dispatch(await actions.search(getImages, query, perPage))\n  }\n\n  const debouncedSearch = useCallback(debounce(search, 1000), [])\n\n  const images = storage.response.hits && storage.response.hits.map(hit => {\n    return (\n      <a key={hit.id} href={hit.largeImageURL} target=\"_blank\" rel=\"noreferrer\">\n        <Image hit={hit}/>\n      </a>\n    );\n  });\n\n  return (\n    <div className=\"search\">\n      <Inputs query={storage.query} perPage={storage.perPage} />\n      {storage.response.total === 0 ? (\n        \"There are no images that suits your criteria\"\n      ) : (\n        <Masonry\n          breakpointCols={breakpointColumns}\n          className=\"my-masonry-grid\"\n          columnClassName=\"my-masonry-grid__column\"\n        >\n          {images}\n        </Masonry>\n      )}\n    </div>\n  );\n};\n","import './App.css';\nimport { Search } from './components/Search/Search';\n\nconst App = () => {\n  return (\n    <div className=\"p-4\">\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}